[
  {
    "type": "Variable",
    "name": "processConfigFuncExpr",
    "jsdoc": {
      "description": "Function expression with JSDoc comments.",
      "tags": [
        {
          "tagName": "param",
          "comment": "The configuration object.",
          "name": "config",
          "type": "{ key: string, value: any }"
        },
        {
          "tagName": "param",
          "comment": "The settings applied.",
          "name": "settings",
          "type": "Settings"
        },
        {
          "tagName": "example",
          "comment": "processConfigFuncExpr({ key: 'mode', value: 'auto' }, { theme: 'light', layout: 'wide' });"
        }
      ]
    },
    "typeAnnotation": {
      "kind": "PrimitiveType",
      "type": "(config: { key: string; value: any; }, settings: Settings) => void"
    }
  },
  {
    "type": "Function",
    "name": "processConfigTraditional",
    "jsdoc": {
      "description": "Traditional function with JSDoc comments.",
      "tags": [
        {
          "tagName": "param",
          "comment": "The configuration object.",
          "name": "config",
          "type": "{ key: string, value: any }"
        },
        {
          "tagName": "param",
          "comment": "The settings applied.",
          "name": "settings",
          "type": "Settings"
        },
        {
          "tagName": "example",
          "comment": "processConfigTraditional({ key: 'speed', value: 'fast' }, { theme: 'blue', layout: 'minimal' });"
        }
      ]
    },
    "parameters": [
      {
        "name": "config",
        "type": {
          "kind": "TypeLiteral",
          "members": [
            {
              "name": "key",
              "type": {
                "kind": "PrimitiveType",
                "type": "string"
              },
              "jsdoc": {
                "description": "The key in the configuration"
              }
            },
            {
              "name": "value",
              "type": {
                "kind": "PrimitiveType",
                "type": "any"
              },
              "jsdoc": {
                "description": "The value associated with the key"
              }
            }
          ]
        },
        "jsdoc": {
          "description": "The configuration object.",
          "tags": [
            {
              "tagName": "param",
              "comment": "The configuration object.",
              "name": "config",
              "type": "{ key: string, value: any }"
            }
          ]
        }
      },
      {
        "name": "settings",
        "type": {
          "kind": "TypeAlias",
          "name": "Settings",
          "type": [
            {
              "name": "theme",
              "type": "string"
            },
            {
              "name": "layout",
              "type": "string"
            }
          ]
        },
        "jsdoc": {
          "description": "The settings applied.",
          "tags": [
            {
              "tagName": "param",
              "comment": "The settings applied.",
              "name": "settings",
              "type": "Settings"
            }
          ]
        }
      }
    ],
    "returnType": "void"
  },
  {
    "type": "TypeAlias",
    "name": "Settings",
    "jsdoc": {
      "description": "A type alias used for settings objects with detailed property JSDoc."
    },
    "typeAnnotation": {
      "kind": "TypeLiteral",
      "members": [
        {
          "name": "theme",
          "type": {
            "kind": "PrimitiveType",
            "type": "string"
          },
          "jsdoc": {
            "description": "The theme of the settings"
          }
        },
        {
          "name": "layout",
          "type": {
            "kind": "PrimitiveType",
            "type": "string"
          },
          "jsdoc": {
            "description": "The layout of the settings"
          }
        }
      ]
    }
  },
  {
    "type": "Class",
    "name": "UserInterface",
    "jsdoc": {
      "description": "Class with properties and methods, including constructor parameters annotated with JSDoc.",
      "tags": [
        {
          "tagName": "example",
          "comment": "const ui = new UserInterface({ name: 'Alice', age: 28 }, { theme: 'light', layout: 'responsive' });"
        }
      ]
    },
    "members": [
      {
        "type": "Property",
        "name": "name",
        "jsdoc": {
          "description": "The name of the user"
        }
      },
      {
        "type": "Constructor",
        "name": "constructor",
        "jsdoc": {
          "description": "UserInterface constructor.",
          "tags": [
            {
              "tagName": "param",
              "comment": "Basic user information.",
              "name": "userInfo",
              "type": "{ name: string, age: number }"
            },
            {
              "tagName": "param",
              "comment": "User specific settings.",
              "name": "settings",
              "type": "Settings"
            }
          ]
        },
        "parameters": [
          {
            "name": "userInfo",
            "type": {
              "kind": "TypeLiteral",
              "members": [
                {
                  "name": "name",
                  "type": {
                    "kind": "PrimitiveType",
                    "type": "string"
                  },
                  "jsdoc": {
                    "description": "The name of the user"
                  }
                },
                {
                  "name": "age",
                  "type": {
                    "kind": "PrimitiveType",
                    "type": "number"
                  },
                  "jsdoc": {
                    "description": "The age of the user"
                  }
                }
              ]
            },
            "jsdoc": {
              "description": "Basic user information.",
              "tags": [
                {
                  "tagName": "param",
                  "comment": "Basic user information.",
                  "name": "userInfo",
                  "type": "{ name: string, age: number }"
                }
              ]
            }
          },
          {
            "name": "settings",
            "type": {
              "kind": "TypeAlias",
              "name": "Settings",
              "type": [
                {
                  "name": "theme",
                  "type": "string"
                },
                {
                  "name": "layout",
                  "type": "string"
                }
              ]
            },
            "jsdoc": {
              "description": "User specific settings.",
              "tags": [
                {
                  "tagName": "param",
                  "comment": "User specific settings.",
                  "name": "settings",
                  "type": "Settings"
                }
              ]
            }
          }
        ]
      },
      {
        "type": "Method",
        "name": "greet",
        "jsdoc": {
          "description": "Greet the user.",
          "tags": [
            {
              "tagName": "returns",
              "comment": "Greeting message",
              "type": "string"
            },
            {
              "tagName": "example",
              "comment": "console.log(ui.greet());"
            }
          ]
        },
        "typeAnnotation": "string"
      }
    ]
  },
  {
    "type": "Enum",
    "name": "LogLevel",
    "jsdoc": {
      "description": ""
    },
    "members": [
      {
        "name": "ERROR",
        "jsdoc": {
          "description": ""
        }
      },
      {
        "name": "WARN",
        "jsdoc": {
          "description": ""
        }
      },
      {
        "name": "INFO",
        "jsdoc": {
          "description": ""
        }
      },
      {
        "name": "DEBUG",
        "jsdoc": {
          "description": ""
        }
      }
    ]
  },
  {
    "type": "Function",
    "name": "logMessage",
    "jsdoc": {
      "description": "Logs a message at a specific log level.",
      "tags": [
        {
          "tagName": "param",
          "comment": "The level to log the message at.",
          "name": "level",
          "type": "LogLevel"
        },
        {
          "tagName": "param",
          "comment": "The message to log.",
          "name": "message",
          "type": "string"
        },
        {
          "tagName": "example",
          "comment": "logMessage(LogLevel.INFO, 'This is an informational message');"
        }
      ]
    },
    "parameters": [
      {
        "name": "level",
        "type": {
          "kind": "TypeAlias",
          "name": "LogLevel",
          "type": {
            "kind": "Union",
            "types": [
              "LogLevel.ERROR",
              "LogLevel.WARN",
              "LogLevel.INFO",
              "LogLevel.DEBUG"
            ]
          }
        },
        "jsdoc": {
          "description": "The level to log the message at.",
          "tags": [
            {
              "tagName": "param",
              "comment": "The level to log the message at.",
              "name": "level",
              "type": "LogLevel"
            }
          ]
        }
      },
      {
        "name": "message",
        "type": {
          "kind": "PrimitiveType",
          "type": "string"
        },
        "jsdoc": {
          "description": "The message to log.",
          "tags": [
            {
              "tagName": "param",
              "comment": "The message to log.",
              "name": "message",
              "type": "string"
            }
          ]
        }
      }
    ],
    "returnType": "void"
  }
]